# -*- coding: utf-8 -*-
"""SolubilityMachineLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ooMi6-4B5Y4-0GFWIBN0-QNpdhFO9JvU

# ML Project with Python->solvability of molecules

# Importing Data
"""

import pandas as pd
df= pd.read_csv("https://raw.githubusercontent.com/dataprofessor/data/master/delaney_solubility_with_descriptors.csv")
df

"""# Preparing"""

y=df['logS']#var dependenta
x=df.drop('logS', axis=1)#datele vor fi sub forma de coloana, var independente
x
y

"""Splitting"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)
x_test

"""
# **Linear Regression**

"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression()
lr.fit(x_train, y_train)

y_lr_train_pred=lr.predict(x_train)
y_lr_test_pred=lr.predict(x_test)
y_lr_train_pred

y_lr_test_pred

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse=mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2=r2_score(y_train, y_lr_train_pred)

lr_test_mse=mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2=r2_score(y_test, y_lr_test_pred)

print("Mean squarred error for train is: ", lr_train_mse)
print("R2 error for train is: ", lr_train_r2)
print("Mean squarred error for test is: ", lr_test_mse)
print("R2 error for test is: ", lr_test_r2)

lr_results=pd.DataFrame(["Linear Regression", lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns=['Method', "Training MSE", "Training R2", "Test MSE", "Test R2"]
lr_results

"""# Random Forrest"""

from sklearn.ensemble import RandomForestRegressor

rf=RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(x_train,y_train)

y_rf_train_predict=rf.predict(x_train)
y_rf_test_predict=rf.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score

rf_train_mse=mean_squared_error(y_train, y_rf_train_predict)
rf_train_r2=r2_score(y_train, y_rf_train_predict)

rf_test_mse=mean_squared_error(y_test, y_rf_test_predict)
rf_test_r2=r2_score(y_test, y_rf_test_predict)

print("Mean squarred error for train is: ", rf_train_mse)
print("R2 error for train is: ", rf_train_r2)
print("Mean squarred error for test is: ", rf_test_mse)
print("R2 error for test is: ", rf_test_r2)

rf_results=pd.DataFrame(['RandomForrest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns=['Method', "Training MSE", "Training R2", "Test MSE", "Test R2"]
rf_results

"""# Results Comparison"""

comparison_results=pd.concat([lr_results, rf_results], axis=0).reset_index(drop=True)
comparison_results

"""# Data Vizualisation"""

import matplotlib.pyplot as plt
import numpy as np
plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred, c="#7CAE00",alpha=0.4)
#pt trendline
z=np.polyfit(y_train, y_lr_train_pred, 1)
p=np.poly1d(z)
#aici e gata trendline-ul
plt.ylabel("Predict LogS")
plt.xlabel("Experimental LogS")

plt.plot(y_train, p(y_train), "#F8766D")